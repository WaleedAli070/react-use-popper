{"version":3,"sources":["../../src/popper.component.tsx","../../src/popper.provider.tsx","ChildComponent.tsx","../../src/popper.hook.ts","App.tsx","index.tsx"],"names":["PopperContainer","children","role","className","styles","PopperContext","createContext","PopperProvider","useState","close","popperId","setPoppers","oldPoppers","id","value","open","element","options","appendTo","document","onClose","poppers","Error","popper","popperElement","privatePopper","React","key","ReactDOM","getAnchorEl","anchorEl","ChidlComponent","context","useContext","usePopper","testingPopper","setTestingPopper","anotherTestingPopper","setAnotherTestingPopper","onClick","e","currentTarget","App","render","getElementById"],"mappings":"oPAGaA,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SACpC,OACE,yBAAKC,KAAK,UAAUC,UAAWC,GADjC,IC4BWC,EAAgBC,6BAAtB,GAIMC,EAAqB,SAAC,GAAD,IAAGN,EAAH,EAAGA,SAAH,EACFO,mBAA9B,IADgC,mBAC1B,EAD0B,KAC1B,EAD0B,KAsC1BC,EAAmBC,YACvBC,GAAWC,YAAU,OAAIA,EAAA,QAAkB,qBAAGC,KAA9CF,SAGF,OACE,kBAACN,EAAD,UAAwBS,MAAO,CAAEC,KAxCZ,SAACC,GAAD,IAAUC,EAAV,4DACrB,EACEJ,GAAIH,OAFe,MACf,oBADe,IACrB,EAEEQ,gBAHmB,MAGRC,SAFP,KADe,EAInBC,EAHF,EAGEA,QAIF,IAAIC,QAAa,qBAAGR,KAApB,MAEA,MACE,MAAM,IAAIS,MAAV,qDAGF,IAAMC,EAAiB,CACrBd,MAAO,WACLA,KACAW,eAAO,IAAPA,SAIEI,EACe,oBAAZR,EAAyBA,EAAhC,GADF,EAGMS,EAA+B,CACnCT,QADmC,EAEnCH,GAFmC,EAGnCK,YAKF,OAFAP,GAAWC,YAAU,4BAAI,GAAJ,CAArBD,OAEA,IAQuCF,UAAvC,EAEGY,OAAY,gBAAC,EAAD,EAAC,UAAD,EAAC,SAAqBR,EAAtB,EAAsBA,GAAtB,OACX,kBAACa,IAAD,UAAgBC,IAAKd,GAClBe,iBAAsBF,yBAAtBE,GALT,S,KCzEF,SAASC,EAAYC,GACnB,MAA2B,oBAAbA,EAA0BA,IAAaA,EAGvD,IA+BeC,EA/BQ,WAAO,IAAD,ECNJ,WACvB,IAAMC,EAAUC,qBAAhB,GAEA,MACE,MAAM,IAAIX,MAAV,kDAGF,SDAwBY,GAAhBnB,EADmB,EACnBA,KAAMN,EADa,EACbA,MADa,EAEeD,oBAAc,GAF7B,mBAEpB2B,EAFoB,KAELC,EAFK,OAG6B5B,oBAAc,GAH3C,mBAGpB6B,EAHoB,KAGEC,EAHF,KAuB3B,OACE,oCACE,4BAAQC,QApBQ,SAACC,GACnB,IAAMV,EAAWD,EAAYW,EAAEC,eAC/B,GAAIN,EAGF,OAFA1B,EAAM0B,EAActB,SACpBuB,GAAiB,GAGnBA,EAAiBrB,EAAK,UAAW,CAAEF,GAAI,aAAcK,SAAUY,OAa7D,kBACA,4BAAQS,QAZe,SAACC,GAC1B,IAAMV,EAAWD,EAAYW,EAAEC,eAC/B,GAAIJ,EAGF,OAFA5B,EAAM4B,EAAqBxB,SAC3ByB,GAAwB,GAG1BA,EAAwBvB,EAAK,kBAAmB,CAAEF,GAAI,aAAcK,SAAUY,OAK5E,4BEnBSY,EAVH,WACV,OACE,oCACE,kBAAC,EAAD,KACE,kBAAC,EAAD,SCJRd,IAASe,OAAO,kBAAC,EAAD,MAASxB,SAASyB,eAAe,U","file":"static/js/main.5fea7c2a.chunk.js","sourcesContent":["import React, { FC } from 'react'\nimport styles from './styles.module.css'\n\nexport const PopperContainer: FC = ({ children }) => {\n  return (\n    <div role=\"tooltip\" className={styles.popperContainer}>\n      {children}\n    </div>\n  )\n}","import React, { FC, createContext, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { PopperContainer } from \"./popper.component\";\n\nexport interface Popper {\n  close: () => void;\n}\n\ninterface PrivatePopper {\n  element: React.ReactNode;\n  id: string;\n  appendTo: Element;\n}\n\ninterface OpenOptions {\n  id?: string;\n  appendTo?: Element;\n  onClose?: () => void;\n}\n\ntype OpenFunc = (\n  element: ((popper: Popper) => React.ReactNode) | React.ReactNode,\n  options?: OpenOptions\n) => PrivatePopper | undefined;\n\ntype CloseFunc = (popperId: string) => void;\n\nexport interface PopperManager {\n  open: OpenFunc;\n  close: CloseFunc;\n}\n\nexport const PopperContext = createContext<PopperManager | undefined>(\n  undefined\n);\n\nexport const PopperProvider: FC = ({ children }) => {\n  const [poppers, setPoppers] = useState<PrivatePopper[]>([]);\n\n  const open: OpenFunc = (element, options = {}) => {\n    const {\n      id: popperId = 'default-popper-id',\n      appendTo = document.body,\n      onClose\n    } = options;\n\n    // Skip if the popper already exists\n    if (poppers.find(({ id }) => id === popperId)) return;\n\n    if (!appendTo) {\n      throw new Error(\"Trying to open a popper in a nonexistent DOM node\");\n    }\n\n    const popper: Popper = {\n      close: () => {\n        close(popperId);\n        onClose?.();\n      }\n    };\n\n    const popperElement =\n      typeof element === \"function\" ? element(popper) : element;\n\n    const privatePopper: PrivatePopper = {\n      element: popperElement,\n      id: popperId,\n      appendTo\n    };\n\n    setPoppers(oldPoppers => [...oldPoppers, privatePopper]);\n\n    return privatePopper\n  };\n\n  const close: CloseFunc = popperId => {\n    setPoppers(oldPoppers => oldPoppers.filter(({ id }) => id !== popperId));\n  };\n\n  return (\n    <PopperContext.Provider value={{ open, close }}>\n      {children}\n      {poppers.map(({ element, appendTo, id }) => (\n        <React.Fragment key={id}>\n          {ReactDOM.createPortal(<PopperContainer>{element}</PopperContainer>, appendTo)}\n        </React.Fragment>\n      ))}\n    </PopperContext.Provider>\n  );\n};","import React, { ReactNode, useState } from 'react'\n\nimport { usePopper } from 'react-use-popper'\nimport 'react-use-popper/dist/index.css'\n\nfunction getAnchorEl(anchorEl: ReactNode) {\n  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;\n}\n\nconst ChidlComponent = () => {\n  const { open, close } = usePopper()\n  const [testingPopper, setTestingPopper] = useState<any>(false)\n  const [anotherTestingPopper, setAnotherTestingPopper] = useState<any>(false)\n\n  const handleClick = (e: React.MouseEvent) => {\n    const anchorEl = getAnchorEl(e.currentTarget)\n    if (testingPopper) {\n      close(testingPopper.id)\n      setTestingPopper(false)\n      return\n    }\n    setTestingPopper(open('Testing', { id: 'testing-id', appendTo: anchorEl }))\n  }\n  const handleAnotherClick = (e: React.MouseEvent) => {\n    const anchorEl = getAnchorEl(e.currentTarget)\n    if (anotherTestingPopper) {\n      close(anotherTestingPopper.id)\n      setAnotherTestingPopper(false)\n      return\n    }\n    setAnotherTestingPopper(open('Another Testing', { id: 'another-id', appendTo: anchorEl }))\n  }\n  return (\n    <>\n      <button onClick={handleClick}>Testing Button</button>\n      <button onClick={handleAnotherClick}>Another Testing Button</button>\n    </>\n  )\n}\n\nexport default ChidlComponent\n","import { useContext } from \"react\";\nimport { PopperContext } from \"./popper.provider\";\n\nexport const usePopper = () => {\n  const context = useContext(PopperContext);\n\n  if (!context) {\n    throw new Error(\"usePopper must be used within a PopperProvider\");\n  }\n\n  return context;\n};","import React from 'react'\n\nimport { PopperProvider } from 'react-use-popper'\nimport 'react-use-popper/dist/index.css'\nimport ChidlComponent from './ChildComponent'\n\nconst App = () => {\n  return (\n    <>\n      <PopperProvider>\n        <ChidlComponent />\n      </PopperProvider>\n    </>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}